// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t_y_raw_data_collection_pbf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "t_y_raw_data_collection_pbf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace innerpeacer {
namespace rawdata {
class TYRawStepEventPbfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TYRawStepEventPbf> {
} _TYRawStepEventPbf_default_instance_;
class TYRawHeadingEventPbfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TYRawHeadingEventPbf> {
} _TYRawHeadingEventPbf_default_instance_;
class TYRawBeaconSignalPbfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TYRawBeaconSignalPbf> {
} _TYRawBeaconSignalPbf_default_instance_;
class TYRawLocationPbfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TYRawLocationPbf> {
} _TYRawLocationPbf_default_instance_;
class TYRawSignalEventPbfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TYRawSignalEventPbf> {
} _TYRawSignalEventPbf_default_instance_;
class TYRawDataCollectionPbfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TYRawDataCollectionPbf> {
} _TYRawDataCollectionPbf_default_instance_;

namespace protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawStepEventPbf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawStepEventPbf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawStepEventPbf, timestamp_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawHeadingEventPbf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawHeadingEventPbf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawHeadingEventPbf, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawHeadingEventPbf, heading_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawBeaconSignalPbf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawBeaconSignalPbf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawBeaconSignalPbf, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawBeaconSignalPbf, major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawBeaconSignalPbf, minor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawBeaconSignalPbf, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawBeaconSignalPbf, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawBeaconSignalPbf, floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawBeaconSignalPbf, rssi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawBeaconSignalPbf, accuracy_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawLocationPbf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawLocationPbf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawLocationPbf, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawLocationPbf, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawLocationPbf, floor_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawSignalEventPbf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawSignalEventPbf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawSignalEventPbf, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawSignalEventPbf, beacons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawSignalEventPbf, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawSignalEventPbf, immediatelocation_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawDataCollectionPbf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawDataCollectionPbf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawDataCollectionPbf, dataid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawDataCollectionPbf, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawDataCollectionPbf, stepevents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawDataCollectionPbf, headingevents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYRawDataCollectionPbf, signalevents_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(TYRawStepEventPbf)},
  { 6, 12, sizeof(TYRawHeadingEventPbf)},
  { 14, 26, sizeof(TYRawBeaconSignalPbf)},
  { 34, 41, sizeof(TYRawLocationPbf)},
  { 44, 52, sizeof(TYRawSignalEventPbf)},
  { 56, 65, sizeof(TYRawDataCollectionPbf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TYRawStepEventPbf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TYRawHeadingEventPbf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TYRawBeaconSignalPbf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TYRawLocationPbf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TYRawSignalEventPbf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TYRawDataCollectionPbf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "t_y_raw_data_collection_pbf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _TYRawStepEventPbf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TYRawHeadingEventPbf_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TYRawBeaconSignalPbf_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TYRawLocationPbf_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TYRawSignalEventPbf_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _TYRawDataCollectionPbf_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TYRawStepEventPbf_default_instance_.DefaultConstruct();
  _TYRawHeadingEventPbf_default_instance_.DefaultConstruct();
  _TYRawBeaconSignalPbf_default_instance_.DefaultConstruct();
  _TYRawLocationPbf_default_instance_.DefaultConstruct();
  _TYRawSignalEventPbf_default_instance_.DefaultConstruct();
  _TYRawDataCollectionPbf_default_instance_.DefaultConstruct();
  _TYRawSignalEventPbf_default_instance_.get_mutable()->location_ = const_cast< ::innerpeacer::rawdata::TYRawLocationPbf*>(
      ::innerpeacer::rawdata::TYRawLocationPbf::internal_default_instance());
  _TYRawSignalEventPbf_default_instance_.get_mutable()->immediatelocation_ = const_cast< ::innerpeacer::rawdata::TYRawLocationPbf*>(
      ::innerpeacer::rawdata::TYRawLocationPbf::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n!t_y_raw_data_collection_pbf.proto\022\023inn"
      "erpeacer.rawdata\"&\n\021TYRawStepEventPbf\022\021\n"
      "\ttimestamp\030\001 \002(\001\":\n\024TYRawHeadingEventPbf"
      "\022\021\n\ttimestamp\030\001 \002(\001\022\017\n\007heading\030\002 \002(\001\"\207\001\n"
      "\024TYRawBeaconSignalPbf\022\014\n\004uuid\030\001 \002(\t\022\r\n\005m"
      "ajor\030\002 \002(\r\022\r\n\005minor\030\003 \002(\r\022\t\n\001x\030\004 \002(\001\022\t\n\001"
      "y\030\005 \002(\001\022\r\n\005floor\030\006 \002(\r\022\014\n\004rssi\030\007 \002(\r\022\020\n\010"
      "accuracy\030\010 \002(\001\"7\n\020TYRawLocationPbf\022\t\n\001x\030"
      "\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\r\n\005floor\030\003 \002(\r\"\337\001\n\023TYRa"
      "wSignalEventPbf\022\021\n\ttimestamp\030\001 \002(\001\022:\n\007be"
      "acons\030\002 \003(\0132).innerpeacer.rawdata.TYRawB"
      "eaconSignalPbf\0227\n\010location\030\003 \002(\0132%.inner"
      "peacer.rawdata.TYRawLocationPbf\022@\n\021immed"
      "iateLocation\030\004 \002(\0132%.innerpeacer.rawdata"
      ".TYRawLocationPbf\"\371\001\n\026TYRawDataCollectio"
      "nPbf\022\016\n\006dataID\030\001 \002(\t\022\021\n\ttimestamp\030\002 \002(\001\022"
      ":\n\nstepEvents\030\003 \003(\0132&.innerpeacer.rawdat"
      "a.TYRawStepEventPbf\022@\n\rheadingEvents\030\004 \003"
      "(\0132).innerpeacer.rawdata.TYRawHeadingEve"
      "ntPbf\022>\n\014signalEvents\030\005 \003(\0132(.innerpeace"
      "r.rawdata.TYRawSignalEventPbf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 829);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "t_y_raw_data_collection_pbf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TYRawStepEventPbf::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TYRawStepEventPbf::TYRawStepEventPbf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:innerpeacer.rawdata.TYRawStepEventPbf)
}
TYRawStepEventPbf::TYRawStepEventPbf(const TYRawStepEventPbf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:innerpeacer.rawdata.TYRawStepEventPbf)
}

void TYRawStepEventPbf::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
}

TYRawStepEventPbf::~TYRawStepEventPbf() {
  // @@protoc_insertion_point(destructor:innerpeacer.rawdata.TYRawStepEventPbf)
  SharedDtor();
}

void TYRawStepEventPbf::SharedDtor() {
}

void TYRawStepEventPbf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TYRawStepEventPbf::descriptor() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[0].descriptor;
}

const TYRawStepEventPbf& TYRawStepEventPbf::default_instance() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  return *internal_default_instance();
}

TYRawStepEventPbf* TYRawStepEventPbf::New(::google::protobuf::Arena* arena) const {
  TYRawStepEventPbf* n = new TYRawStepEventPbf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TYRawStepEventPbf::Clear() {
// @@protoc_insertion_point(message_clear_start:innerpeacer.rawdata.TYRawStepEventPbf)
  timestamp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TYRawStepEventPbf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:innerpeacer.rawdata.TYRawStepEventPbf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:innerpeacer.rawdata.TYRawStepEventPbf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:innerpeacer.rawdata.TYRawStepEventPbf)
  return false;
#undef DO_
}

void TYRawStepEventPbf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:innerpeacer.rawdata.TYRawStepEventPbf)
  // required double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:innerpeacer.rawdata.TYRawStepEventPbf)
}

::google::protobuf::uint8* TYRawStepEventPbf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:innerpeacer.rawdata.TYRawStepEventPbf)
  // required double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:innerpeacer.rawdata.TYRawStepEventPbf)
  return target;
}

size_t TYRawStepEventPbf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:innerpeacer.rawdata.TYRawStepEventPbf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required double timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 + 8;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TYRawStepEventPbf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:innerpeacer.rawdata.TYRawStepEventPbf)
  GOOGLE_DCHECK_NE(&from, this);
  const TYRawStepEventPbf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TYRawStepEventPbf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:innerpeacer.rawdata.TYRawStepEventPbf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:innerpeacer.rawdata.TYRawStepEventPbf)
    MergeFrom(*source);
  }
}

void TYRawStepEventPbf::MergeFrom(const TYRawStepEventPbf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:innerpeacer.rawdata.TYRawStepEventPbf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void TYRawStepEventPbf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:innerpeacer.rawdata.TYRawStepEventPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TYRawStepEventPbf::CopyFrom(const TYRawStepEventPbf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:innerpeacer.rawdata.TYRawStepEventPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TYRawStepEventPbf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TYRawStepEventPbf::Swap(TYRawStepEventPbf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TYRawStepEventPbf::InternalSwap(TYRawStepEventPbf* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TYRawStepEventPbf::GetMetadata() const {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TYRawStepEventPbf

// required double timestamp = 1;
bool TYRawStepEventPbf::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TYRawStepEventPbf::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void TYRawStepEventPbf::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void TYRawStepEventPbf::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double TYRawStepEventPbf::timestamp() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawStepEventPbf.timestamp)
  return timestamp_;
}
void TYRawStepEventPbf::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawStepEventPbf.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TYRawHeadingEventPbf::kTimestampFieldNumber;
const int TYRawHeadingEventPbf::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TYRawHeadingEventPbf::TYRawHeadingEventPbf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:innerpeacer.rawdata.TYRawHeadingEventPbf)
}
TYRawHeadingEventPbf::TYRawHeadingEventPbf(const TYRawHeadingEventPbf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:innerpeacer.rawdata.TYRawHeadingEventPbf)
}

void TYRawHeadingEventPbf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(heading_));
}

TYRawHeadingEventPbf::~TYRawHeadingEventPbf() {
  // @@protoc_insertion_point(destructor:innerpeacer.rawdata.TYRawHeadingEventPbf)
  SharedDtor();
}

void TYRawHeadingEventPbf::SharedDtor() {
}

void TYRawHeadingEventPbf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TYRawHeadingEventPbf::descriptor() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[1].descriptor;
}

const TYRawHeadingEventPbf& TYRawHeadingEventPbf::default_instance() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  return *internal_default_instance();
}

TYRawHeadingEventPbf* TYRawHeadingEventPbf::New(::google::protobuf::Arena* arena) const {
  TYRawHeadingEventPbf* n = new TYRawHeadingEventPbf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TYRawHeadingEventPbf::Clear() {
// @@protoc_insertion_point(message_clear_start:innerpeacer.rawdata.TYRawHeadingEventPbf)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TYRawHeadingEventPbf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:innerpeacer.rawdata.TYRawHeadingEventPbf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:innerpeacer.rawdata.TYRawHeadingEventPbf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:innerpeacer.rawdata.TYRawHeadingEventPbf)
  return false;
#undef DO_
}

void TYRawHeadingEventPbf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:innerpeacer.rawdata.TYRawHeadingEventPbf)
  // required double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // required double heading = 2;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:innerpeacer.rawdata.TYRawHeadingEventPbf)
}

::google::protobuf::uint8* TYRawHeadingEventPbf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:innerpeacer.rawdata.TYRawHeadingEventPbf)
  // required double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // required double heading = 2;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:innerpeacer.rawdata.TYRawHeadingEventPbf)
  return target;
}

size_t TYRawHeadingEventPbf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:innerpeacer.rawdata.TYRawHeadingEventPbf)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required double timestamp = 1;
    total_size += 1 + 8;
  }

  if (has_heading()) {
    // required double heading = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t TYRawHeadingEventPbf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:innerpeacer.rawdata.TYRawHeadingEventPbf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double timestamp = 1;
    total_size += 1 + 8;

    // required double heading = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TYRawHeadingEventPbf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:innerpeacer.rawdata.TYRawHeadingEventPbf)
  GOOGLE_DCHECK_NE(&from, this);
  const TYRawHeadingEventPbf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TYRawHeadingEventPbf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:innerpeacer.rawdata.TYRawHeadingEventPbf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:innerpeacer.rawdata.TYRawHeadingEventPbf)
    MergeFrom(*source);
  }
}

void TYRawHeadingEventPbf::MergeFrom(const TYRawHeadingEventPbf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:innerpeacer.rawdata.TYRawHeadingEventPbf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
  }
}

void TYRawHeadingEventPbf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:innerpeacer.rawdata.TYRawHeadingEventPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TYRawHeadingEventPbf::CopyFrom(const TYRawHeadingEventPbf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:innerpeacer.rawdata.TYRawHeadingEventPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TYRawHeadingEventPbf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TYRawHeadingEventPbf::Swap(TYRawHeadingEventPbf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TYRawHeadingEventPbf::InternalSwap(TYRawHeadingEventPbf* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(heading_, other->heading_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TYRawHeadingEventPbf::GetMetadata() const {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TYRawHeadingEventPbf

// required double timestamp = 1;
bool TYRawHeadingEventPbf::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TYRawHeadingEventPbf::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void TYRawHeadingEventPbf::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void TYRawHeadingEventPbf::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double TYRawHeadingEventPbf::timestamp() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawHeadingEventPbf.timestamp)
  return timestamp_;
}
void TYRawHeadingEventPbf::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawHeadingEventPbf.timestamp)
}

// required double heading = 2;
bool TYRawHeadingEventPbf::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TYRawHeadingEventPbf::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void TYRawHeadingEventPbf::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void TYRawHeadingEventPbf::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double TYRawHeadingEventPbf::heading() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawHeadingEventPbf.heading)
  return heading_;
}
void TYRawHeadingEventPbf::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawHeadingEventPbf.heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TYRawBeaconSignalPbf::kUuidFieldNumber;
const int TYRawBeaconSignalPbf::kMajorFieldNumber;
const int TYRawBeaconSignalPbf::kMinorFieldNumber;
const int TYRawBeaconSignalPbf::kXFieldNumber;
const int TYRawBeaconSignalPbf::kYFieldNumber;
const int TYRawBeaconSignalPbf::kFloorFieldNumber;
const int TYRawBeaconSignalPbf::kRssiFieldNumber;
const int TYRawBeaconSignalPbf::kAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TYRawBeaconSignalPbf::TYRawBeaconSignalPbf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:innerpeacer.rawdata.TYRawBeaconSignalPbf)
}
TYRawBeaconSignalPbf::TYRawBeaconSignalPbf(const TYRawBeaconSignalPbf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  ::memcpy(&major_, &from.major_,
    reinterpret_cast<char*>(&accuracy_) -
    reinterpret_cast<char*>(&major_) + sizeof(accuracy_));
  // @@protoc_insertion_point(copy_constructor:innerpeacer.rawdata.TYRawBeaconSignalPbf)
}

void TYRawBeaconSignalPbf::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_, 0, reinterpret_cast<char*>(&accuracy_) -
    reinterpret_cast<char*>(&major_) + sizeof(accuracy_));
}

TYRawBeaconSignalPbf::~TYRawBeaconSignalPbf() {
  // @@protoc_insertion_point(destructor:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  SharedDtor();
}

void TYRawBeaconSignalPbf::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TYRawBeaconSignalPbf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TYRawBeaconSignalPbf::descriptor() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[2].descriptor;
}

const TYRawBeaconSignalPbf& TYRawBeaconSignalPbf::default_instance() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  return *internal_default_instance();
}

TYRawBeaconSignalPbf* TYRawBeaconSignalPbf::New(::google::protobuf::Arena* arena) const {
  TYRawBeaconSignalPbf* n = new TYRawBeaconSignalPbf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TYRawBeaconSignalPbf::Clear() {
// @@protoc_insertion_point(message_clear_start:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  if (has_uuid()) {
    GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*uuid_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&major_, 0, reinterpret_cast<char*>(&accuracy_) -
      reinterpret_cast<char*>(&major_) + sizeof(accuracy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TYRawBeaconSignalPbf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "innerpeacer.rawdata.TYRawBeaconSignalPbf.uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 major = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_major();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 minor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_minor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 floor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_floor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 rssi = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_rssi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rssi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double accuracy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_accuracy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  return false;
#undef DO_
}

void TYRawBeaconSignalPbf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "innerpeacer.rawdata.TYRawBeaconSignalPbf.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // required uint32 major = 2;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->major(), output);
  }

  // required uint32 minor = 3;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minor(), output);
  }

  // required double x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }

  // required double y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }

  // required uint32 floor = 6;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->floor(), output);
  }

  // required uint32 rssi = 7;
  if (has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rssi(), output);
  }

  // required double accuracy = 8;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->accuracy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:innerpeacer.rawdata.TYRawBeaconSignalPbf)
}

::google::protobuf::uint8* TYRawBeaconSignalPbf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "innerpeacer.rawdata.TYRawBeaconSignalPbf.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required uint32 major = 2;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->major(), target);
  }

  // required uint32 minor = 3;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minor(), target);
  }

  // required double x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }

  // required double y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }

  // required uint32 floor = 6;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->floor(), target);
  }

  // required uint32 rssi = 7;
  if (has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rssi(), target);
  }

  // required double accuracy = 8;
  if (has_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->accuracy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  return target;
}

size_t TYRawBeaconSignalPbf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  size_t total_size = 0;

  if (has_uuid()) {
    // required string uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  if (has_major()) {
    // required uint32 major = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major());
  }

  if (has_minor()) {
    // required uint32 minor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minor());
  }

  if (has_x()) {
    // required double x = 4;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 5;
    total_size += 1 + 8;
  }

  if (has_floor()) {
    // required uint32 floor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->floor());
  }

  if (has_rssi()) {
    // required uint32 rssi = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rssi());
  }

  if (has_accuracy()) {
    // required double accuracy = 8;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t TYRawBeaconSignalPbf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());

    // required uint32 major = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major());

    // required uint32 minor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minor());

    // required double x = 4;
    total_size += 1 + 8;

    // required double y = 5;
    total_size += 1 + 8;

    // required uint32 floor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->floor());

    // required uint32 rssi = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rssi());

    // required double accuracy = 8;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TYRawBeaconSignalPbf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  GOOGLE_DCHECK_NE(&from, this);
  const TYRawBeaconSignalPbf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TYRawBeaconSignalPbf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:innerpeacer.rawdata.TYRawBeaconSignalPbf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:innerpeacer.rawdata.TYRawBeaconSignalPbf)
    MergeFrom(*source);
  }
}

void TYRawBeaconSignalPbf::MergeFrom(const TYRawBeaconSignalPbf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_uuid()) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_rssi()) {
      set_rssi(from.rssi());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
  }
}

void TYRawBeaconSignalPbf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TYRawBeaconSignalPbf::CopyFrom(const TYRawBeaconSignalPbf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:innerpeacer.rawdata.TYRawBeaconSignalPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TYRawBeaconSignalPbf::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void TYRawBeaconSignalPbf::Swap(TYRawBeaconSignalPbf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TYRawBeaconSignalPbf::InternalSwap(TYRawBeaconSignalPbf* other) {
  uuid_.Swap(&other->uuid_);
  std::swap(major_, other->major_);
  std::swap(minor_, other->minor_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(floor_, other->floor_);
  std::swap(rssi_, other->rssi_);
  std::swap(accuracy_, other->accuracy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TYRawBeaconSignalPbf::GetMetadata() const {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TYRawBeaconSignalPbf

// required string uuid = 1;
bool TYRawBeaconSignalPbf::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TYRawBeaconSignalPbf::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void TYRawBeaconSignalPbf::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TYRawBeaconSignalPbf::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& TYRawBeaconSignalPbf::uuid() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawBeaconSignalPbf.uuid)
  return uuid_.GetNoArena();
}
void TYRawBeaconSignalPbf::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawBeaconSignalPbf.uuid)
}
#if LANG_CXX11
void TYRawBeaconSignalPbf::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:innerpeacer.rawdata.TYRawBeaconSignalPbf.uuid)
}
#endif
void TYRawBeaconSignalPbf::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:innerpeacer.rawdata.TYRawBeaconSignalPbf.uuid)
}
void TYRawBeaconSignalPbf::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:innerpeacer.rawdata.TYRawBeaconSignalPbf.uuid)
}
::std::string* TYRawBeaconSignalPbf::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:innerpeacer.rawdata.TYRawBeaconSignalPbf.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TYRawBeaconSignalPbf::release_uuid() {
  // @@protoc_insertion_point(field_release:innerpeacer.rawdata.TYRawBeaconSignalPbf.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TYRawBeaconSignalPbf::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:innerpeacer.rawdata.TYRawBeaconSignalPbf.uuid)
}

// required uint32 major = 2;
bool TYRawBeaconSignalPbf::has_major() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TYRawBeaconSignalPbf::set_has_major() {
  _has_bits_[0] |= 0x00000002u;
}
void TYRawBeaconSignalPbf::clear_has_major() {
  _has_bits_[0] &= ~0x00000002u;
}
void TYRawBeaconSignalPbf::clear_major() {
  major_ = 0u;
  clear_has_major();
}
::google::protobuf::uint32 TYRawBeaconSignalPbf::major() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawBeaconSignalPbf.major)
  return major_;
}
void TYRawBeaconSignalPbf::set_major(::google::protobuf::uint32 value) {
  set_has_major();
  major_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawBeaconSignalPbf.major)
}

// required uint32 minor = 3;
bool TYRawBeaconSignalPbf::has_minor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TYRawBeaconSignalPbf::set_has_minor() {
  _has_bits_[0] |= 0x00000004u;
}
void TYRawBeaconSignalPbf::clear_has_minor() {
  _has_bits_[0] &= ~0x00000004u;
}
void TYRawBeaconSignalPbf::clear_minor() {
  minor_ = 0u;
  clear_has_minor();
}
::google::protobuf::uint32 TYRawBeaconSignalPbf::minor() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawBeaconSignalPbf.minor)
  return minor_;
}
void TYRawBeaconSignalPbf::set_minor(::google::protobuf::uint32 value) {
  set_has_minor();
  minor_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawBeaconSignalPbf.minor)
}

// required double x = 4;
bool TYRawBeaconSignalPbf::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TYRawBeaconSignalPbf::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
void TYRawBeaconSignalPbf::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void TYRawBeaconSignalPbf::clear_x() {
  x_ = 0;
  clear_has_x();
}
double TYRawBeaconSignalPbf::x() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawBeaconSignalPbf.x)
  return x_;
}
void TYRawBeaconSignalPbf::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawBeaconSignalPbf.x)
}

// required double y = 5;
bool TYRawBeaconSignalPbf::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TYRawBeaconSignalPbf::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
void TYRawBeaconSignalPbf::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void TYRawBeaconSignalPbf::clear_y() {
  y_ = 0;
  clear_has_y();
}
double TYRawBeaconSignalPbf::y() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawBeaconSignalPbf.y)
  return y_;
}
void TYRawBeaconSignalPbf::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawBeaconSignalPbf.y)
}

// required uint32 floor = 6;
bool TYRawBeaconSignalPbf::has_floor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TYRawBeaconSignalPbf::set_has_floor() {
  _has_bits_[0] |= 0x00000020u;
}
void TYRawBeaconSignalPbf::clear_has_floor() {
  _has_bits_[0] &= ~0x00000020u;
}
void TYRawBeaconSignalPbf::clear_floor() {
  floor_ = 0u;
  clear_has_floor();
}
::google::protobuf::uint32 TYRawBeaconSignalPbf::floor() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawBeaconSignalPbf.floor)
  return floor_;
}
void TYRawBeaconSignalPbf::set_floor(::google::protobuf::uint32 value) {
  set_has_floor();
  floor_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawBeaconSignalPbf.floor)
}

// required uint32 rssi = 7;
bool TYRawBeaconSignalPbf::has_rssi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TYRawBeaconSignalPbf::set_has_rssi() {
  _has_bits_[0] |= 0x00000040u;
}
void TYRawBeaconSignalPbf::clear_has_rssi() {
  _has_bits_[0] &= ~0x00000040u;
}
void TYRawBeaconSignalPbf::clear_rssi() {
  rssi_ = 0u;
  clear_has_rssi();
}
::google::protobuf::uint32 TYRawBeaconSignalPbf::rssi() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawBeaconSignalPbf.rssi)
  return rssi_;
}
void TYRawBeaconSignalPbf::set_rssi(::google::protobuf::uint32 value) {
  set_has_rssi();
  rssi_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawBeaconSignalPbf.rssi)
}

// required double accuracy = 8;
bool TYRawBeaconSignalPbf::has_accuracy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TYRawBeaconSignalPbf::set_has_accuracy() {
  _has_bits_[0] |= 0x00000080u;
}
void TYRawBeaconSignalPbf::clear_has_accuracy() {
  _has_bits_[0] &= ~0x00000080u;
}
void TYRawBeaconSignalPbf::clear_accuracy() {
  accuracy_ = 0;
  clear_has_accuracy();
}
double TYRawBeaconSignalPbf::accuracy() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawBeaconSignalPbf.accuracy)
  return accuracy_;
}
void TYRawBeaconSignalPbf::set_accuracy(double value) {
  set_has_accuracy();
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawBeaconSignalPbf.accuracy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TYRawLocationPbf::kXFieldNumber;
const int TYRawLocationPbf::kYFieldNumber;
const int TYRawLocationPbf::kFloorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TYRawLocationPbf::TYRawLocationPbf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:innerpeacer.rawdata.TYRawLocationPbf)
}
TYRawLocationPbf::TYRawLocationPbf(const TYRawLocationPbf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&floor_) -
    reinterpret_cast<char*>(&x_) + sizeof(floor_));
  // @@protoc_insertion_point(copy_constructor:innerpeacer.rawdata.TYRawLocationPbf)
}

void TYRawLocationPbf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&floor_) -
    reinterpret_cast<char*>(&x_) + sizeof(floor_));
}

TYRawLocationPbf::~TYRawLocationPbf() {
  // @@protoc_insertion_point(destructor:innerpeacer.rawdata.TYRawLocationPbf)
  SharedDtor();
}

void TYRawLocationPbf::SharedDtor() {
}

void TYRawLocationPbf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TYRawLocationPbf::descriptor() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[3].descriptor;
}

const TYRawLocationPbf& TYRawLocationPbf::default_instance() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  return *internal_default_instance();
}

TYRawLocationPbf* TYRawLocationPbf::New(::google::protobuf::Arena* arena) const {
  TYRawLocationPbf* n = new TYRawLocationPbf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TYRawLocationPbf::Clear() {
// @@protoc_insertion_point(message_clear_start:innerpeacer.rawdata.TYRawLocationPbf)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&floor_) -
      reinterpret_cast<char*>(&x_) + sizeof(floor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TYRawLocationPbf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:innerpeacer.rawdata.TYRawLocationPbf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 floor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_floor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:innerpeacer.rawdata.TYRawLocationPbf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:innerpeacer.rawdata.TYRawLocationPbf)
  return false;
#undef DO_
}

void TYRawLocationPbf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:innerpeacer.rawdata.TYRawLocationPbf)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required uint32 floor = 3;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->floor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:innerpeacer.rawdata.TYRawLocationPbf)
}

::google::protobuf::uint8* TYRawLocationPbf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:innerpeacer.rawdata.TYRawLocationPbf)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required uint32 floor = 3;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->floor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:innerpeacer.rawdata.TYRawLocationPbf)
  return target;
}

size_t TYRawLocationPbf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:innerpeacer.rawdata.TYRawLocationPbf)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_floor()) {
    // required uint32 floor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->floor());
  }

  return total_size;
}
size_t TYRawLocationPbf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:innerpeacer.rawdata.TYRawLocationPbf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required uint32 floor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->floor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TYRawLocationPbf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:innerpeacer.rawdata.TYRawLocationPbf)
  GOOGLE_DCHECK_NE(&from, this);
  const TYRawLocationPbf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TYRawLocationPbf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:innerpeacer.rawdata.TYRawLocationPbf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:innerpeacer.rawdata.TYRawLocationPbf)
    MergeFrom(*source);
  }
}

void TYRawLocationPbf::MergeFrom(const TYRawLocationPbf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:innerpeacer.rawdata.TYRawLocationPbf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
  }
}

void TYRawLocationPbf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:innerpeacer.rawdata.TYRawLocationPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TYRawLocationPbf::CopyFrom(const TYRawLocationPbf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:innerpeacer.rawdata.TYRawLocationPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TYRawLocationPbf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TYRawLocationPbf::Swap(TYRawLocationPbf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TYRawLocationPbf::InternalSwap(TYRawLocationPbf* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(floor_, other->floor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TYRawLocationPbf::GetMetadata() const {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TYRawLocationPbf

// required double x = 1;
bool TYRawLocationPbf::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TYRawLocationPbf::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void TYRawLocationPbf::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void TYRawLocationPbf::clear_x() {
  x_ = 0;
  clear_has_x();
}
double TYRawLocationPbf::x() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawLocationPbf.x)
  return x_;
}
void TYRawLocationPbf::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawLocationPbf.x)
}

// required double y = 2;
bool TYRawLocationPbf::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TYRawLocationPbf::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void TYRawLocationPbf::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void TYRawLocationPbf::clear_y() {
  y_ = 0;
  clear_has_y();
}
double TYRawLocationPbf::y() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawLocationPbf.y)
  return y_;
}
void TYRawLocationPbf::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawLocationPbf.y)
}

// required uint32 floor = 3;
bool TYRawLocationPbf::has_floor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TYRawLocationPbf::set_has_floor() {
  _has_bits_[0] |= 0x00000004u;
}
void TYRawLocationPbf::clear_has_floor() {
  _has_bits_[0] &= ~0x00000004u;
}
void TYRawLocationPbf::clear_floor() {
  floor_ = 0u;
  clear_has_floor();
}
::google::protobuf::uint32 TYRawLocationPbf::floor() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawLocationPbf.floor)
  return floor_;
}
void TYRawLocationPbf::set_floor(::google::protobuf::uint32 value) {
  set_has_floor();
  floor_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawLocationPbf.floor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TYRawSignalEventPbf::kTimestampFieldNumber;
const int TYRawSignalEventPbf::kBeaconsFieldNumber;
const int TYRawSignalEventPbf::kLocationFieldNumber;
const int TYRawSignalEventPbf::kImmediateLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TYRawSignalEventPbf::TYRawSignalEventPbf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:innerpeacer.rawdata.TYRawSignalEventPbf)
}
TYRawSignalEventPbf::TYRawSignalEventPbf(const TYRawSignalEventPbf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      beacons_(from.beacons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::innerpeacer::rawdata::TYRawLocationPbf(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_immediatelocation()) {
    immediatelocation_ = new ::innerpeacer::rawdata::TYRawLocationPbf(*from.immediatelocation_);
  } else {
    immediatelocation_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:innerpeacer.rawdata.TYRawSignalEventPbf)
}

void TYRawSignalEventPbf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&location_) + sizeof(timestamp_));
}

TYRawSignalEventPbf::~TYRawSignalEventPbf() {
  // @@protoc_insertion_point(destructor:innerpeacer.rawdata.TYRawSignalEventPbf)
  SharedDtor();
}

void TYRawSignalEventPbf::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete immediatelocation_;
  }
}

void TYRawSignalEventPbf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TYRawSignalEventPbf::descriptor() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[4].descriptor;
}

const TYRawSignalEventPbf& TYRawSignalEventPbf::default_instance() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  return *internal_default_instance();
}

TYRawSignalEventPbf* TYRawSignalEventPbf::New(::google::protobuf::Arena* arena) const {
  TYRawSignalEventPbf* n = new TYRawSignalEventPbf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TYRawSignalEventPbf::Clear() {
// @@protoc_insertion_point(message_clear_start:innerpeacer.rawdata.TYRawSignalEventPbf)
  beacons_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_location()) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::innerpeacer::rawdata::TYRawLocationPbf::Clear();
    }
    if (has_immediatelocation()) {
      GOOGLE_DCHECK(immediatelocation_ != NULL);
      immediatelocation_->::innerpeacer::rawdata::TYRawLocationPbf::Clear();
    }
  }
  timestamp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TYRawSignalEventPbf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:innerpeacer.rawdata.TYRawSignalEventPbf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .innerpeacer.rawdata.TYRawBeaconSignalPbf beacons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_beacons()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // required .innerpeacer.rawdata.TYRawLocationPbf location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .innerpeacer.rawdata.TYRawLocationPbf immediateLocation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_immediatelocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:innerpeacer.rawdata.TYRawSignalEventPbf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:innerpeacer.rawdata.TYRawSignalEventPbf)
  return false;
#undef DO_
}

void TYRawSignalEventPbf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:innerpeacer.rawdata.TYRawSignalEventPbf)
  // required double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // repeated .innerpeacer.rawdata.TYRawBeaconSignalPbf beacons = 2;
  for (unsigned int i = 0, n = this->beacons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->beacons(i), output);
  }

  // required .innerpeacer.rawdata.TYRawLocationPbf location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // required .innerpeacer.rawdata.TYRawLocationPbf immediateLocation = 4;
  if (has_immediatelocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->immediatelocation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:innerpeacer.rawdata.TYRawSignalEventPbf)
}

::google::protobuf::uint8* TYRawSignalEventPbf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:innerpeacer.rawdata.TYRawSignalEventPbf)
  // required double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // repeated .innerpeacer.rawdata.TYRawBeaconSignalPbf beacons = 2;
  for (unsigned int i = 0, n = this->beacons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->beacons(i), false, target);
  }

  // required .innerpeacer.rawdata.TYRawLocationPbf location = 3;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, false, target);
  }

  // required .innerpeacer.rawdata.TYRawLocationPbf immediateLocation = 4;
  if (has_immediatelocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->immediatelocation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:innerpeacer.rawdata.TYRawSignalEventPbf)
  return target;
}

size_t TYRawSignalEventPbf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:innerpeacer.rawdata.TYRawSignalEventPbf)
  size_t total_size = 0;

  if (has_location()) {
    // required .innerpeacer.rawdata.TYRawLocationPbf location = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (has_immediatelocation()) {
    // required .innerpeacer.rawdata.TYRawLocationPbf immediateLocation = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->immediatelocation_);
  }

  if (has_timestamp()) {
    // required double timestamp = 1;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t TYRawSignalEventPbf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:innerpeacer.rawdata.TYRawSignalEventPbf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .innerpeacer.rawdata.TYRawLocationPbf location = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);

    // required .innerpeacer.rawdata.TYRawLocationPbf immediateLocation = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->immediatelocation_);

    // required double timestamp = 1;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .innerpeacer.rawdata.TYRawBeaconSignalPbf beacons = 2;
  {
    unsigned int count = this->beacons_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beacons(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TYRawSignalEventPbf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:innerpeacer.rawdata.TYRawSignalEventPbf)
  GOOGLE_DCHECK_NE(&from, this);
  const TYRawSignalEventPbf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TYRawSignalEventPbf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:innerpeacer.rawdata.TYRawSignalEventPbf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:innerpeacer.rawdata.TYRawSignalEventPbf)
    MergeFrom(*source);
  }
}

void TYRawSignalEventPbf::MergeFrom(const TYRawSignalEventPbf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:innerpeacer.rawdata.TYRawSignalEventPbf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  beacons_.MergeFrom(from.beacons_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_location()) {
      mutable_location()->::innerpeacer::rawdata::TYRawLocationPbf::MergeFrom(from.location());
    }
    if (from.has_immediatelocation()) {
      mutable_immediatelocation()->::innerpeacer::rawdata::TYRawLocationPbf::MergeFrom(from.immediatelocation());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void TYRawSignalEventPbf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:innerpeacer.rawdata.TYRawSignalEventPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TYRawSignalEventPbf::CopyFrom(const TYRawSignalEventPbf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:innerpeacer.rawdata.TYRawSignalEventPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TYRawSignalEventPbf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->beacons())) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_immediatelocation()) {
    if (!this->immediatelocation_->IsInitialized()) return false;
  }
  return true;
}

void TYRawSignalEventPbf::Swap(TYRawSignalEventPbf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TYRawSignalEventPbf::InternalSwap(TYRawSignalEventPbf* other) {
  beacons_.UnsafeArenaSwap(&other->beacons_);
  std::swap(location_, other->location_);
  std::swap(immediatelocation_, other->immediatelocation_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TYRawSignalEventPbf::GetMetadata() const {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TYRawSignalEventPbf

// required double timestamp = 1;
bool TYRawSignalEventPbf::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TYRawSignalEventPbf::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void TYRawSignalEventPbf::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void TYRawSignalEventPbf::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double TYRawSignalEventPbf::timestamp() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawSignalEventPbf.timestamp)
  return timestamp_;
}
void TYRawSignalEventPbf::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawSignalEventPbf.timestamp)
}

// repeated .innerpeacer.rawdata.TYRawBeaconSignalPbf beacons = 2;
int TYRawSignalEventPbf::beacons_size() const {
  return beacons_.size();
}
void TYRawSignalEventPbf::clear_beacons() {
  beacons_.Clear();
}
const ::innerpeacer::rawdata::TYRawBeaconSignalPbf& TYRawSignalEventPbf::beacons(int index) const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawSignalEventPbf.beacons)
  return beacons_.Get(index);
}
::innerpeacer::rawdata::TYRawBeaconSignalPbf* TYRawSignalEventPbf::mutable_beacons(int index) {
  // @@protoc_insertion_point(field_mutable:innerpeacer.rawdata.TYRawSignalEventPbf.beacons)
  return beacons_.Mutable(index);
}
::innerpeacer::rawdata::TYRawBeaconSignalPbf* TYRawSignalEventPbf::add_beacons() {
  // @@protoc_insertion_point(field_add:innerpeacer.rawdata.TYRawSignalEventPbf.beacons)
  return beacons_.Add();
}
::google::protobuf::RepeatedPtrField< ::innerpeacer::rawdata::TYRawBeaconSignalPbf >*
TYRawSignalEventPbf::mutable_beacons() {
  // @@protoc_insertion_point(field_mutable_list:innerpeacer.rawdata.TYRawSignalEventPbf.beacons)
  return &beacons_;
}
const ::google::protobuf::RepeatedPtrField< ::innerpeacer::rawdata::TYRawBeaconSignalPbf >&
TYRawSignalEventPbf::beacons() const {
  // @@protoc_insertion_point(field_list:innerpeacer.rawdata.TYRawSignalEventPbf.beacons)
  return beacons_;
}

// required .innerpeacer.rawdata.TYRawLocationPbf location = 3;
bool TYRawSignalEventPbf::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TYRawSignalEventPbf::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void TYRawSignalEventPbf::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void TYRawSignalEventPbf::clear_location() {
  if (location_ != NULL) location_->::innerpeacer::rawdata::TYRawLocationPbf::Clear();
  clear_has_location();
}
const ::innerpeacer::rawdata::TYRawLocationPbf& TYRawSignalEventPbf::location() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawSignalEventPbf.location)
  return location_ != NULL ? *location_
                         : *::innerpeacer::rawdata::TYRawLocationPbf::internal_default_instance();
}
::innerpeacer::rawdata::TYRawLocationPbf* TYRawSignalEventPbf::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::innerpeacer::rawdata::TYRawLocationPbf;
  }
  // @@protoc_insertion_point(field_mutable:innerpeacer.rawdata.TYRawSignalEventPbf.location)
  return location_;
}
::innerpeacer::rawdata::TYRawLocationPbf* TYRawSignalEventPbf::release_location() {
  // @@protoc_insertion_point(field_release:innerpeacer.rawdata.TYRawSignalEventPbf.location)
  clear_has_location();
  ::innerpeacer::rawdata::TYRawLocationPbf* temp = location_;
  location_ = NULL;
  return temp;
}
void TYRawSignalEventPbf::set_allocated_location(::innerpeacer::rawdata::TYRawLocationPbf* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:innerpeacer.rawdata.TYRawSignalEventPbf.location)
}

// required .innerpeacer.rawdata.TYRawLocationPbf immediateLocation = 4;
bool TYRawSignalEventPbf::has_immediatelocation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TYRawSignalEventPbf::set_has_immediatelocation() {
  _has_bits_[0] |= 0x00000002u;
}
void TYRawSignalEventPbf::clear_has_immediatelocation() {
  _has_bits_[0] &= ~0x00000002u;
}
void TYRawSignalEventPbf::clear_immediatelocation() {
  if (immediatelocation_ != NULL) immediatelocation_->::innerpeacer::rawdata::TYRawLocationPbf::Clear();
  clear_has_immediatelocation();
}
const ::innerpeacer::rawdata::TYRawLocationPbf& TYRawSignalEventPbf::immediatelocation() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawSignalEventPbf.immediateLocation)
  return immediatelocation_ != NULL ? *immediatelocation_
                         : *::innerpeacer::rawdata::TYRawLocationPbf::internal_default_instance();
}
::innerpeacer::rawdata::TYRawLocationPbf* TYRawSignalEventPbf::mutable_immediatelocation() {
  set_has_immediatelocation();
  if (immediatelocation_ == NULL) {
    immediatelocation_ = new ::innerpeacer::rawdata::TYRawLocationPbf;
  }
  // @@protoc_insertion_point(field_mutable:innerpeacer.rawdata.TYRawSignalEventPbf.immediateLocation)
  return immediatelocation_;
}
::innerpeacer::rawdata::TYRawLocationPbf* TYRawSignalEventPbf::release_immediatelocation() {
  // @@protoc_insertion_point(field_release:innerpeacer.rawdata.TYRawSignalEventPbf.immediateLocation)
  clear_has_immediatelocation();
  ::innerpeacer::rawdata::TYRawLocationPbf* temp = immediatelocation_;
  immediatelocation_ = NULL;
  return temp;
}
void TYRawSignalEventPbf::set_allocated_immediatelocation(::innerpeacer::rawdata::TYRawLocationPbf* immediatelocation) {
  delete immediatelocation_;
  immediatelocation_ = immediatelocation;
  if (immediatelocation) {
    set_has_immediatelocation();
  } else {
    clear_has_immediatelocation();
  }
  // @@protoc_insertion_point(field_set_allocated:innerpeacer.rawdata.TYRawSignalEventPbf.immediateLocation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TYRawDataCollectionPbf::kDataIDFieldNumber;
const int TYRawDataCollectionPbf::kTimestampFieldNumber;
const int TYRawDataCollectionPbf::kStepEventsFieldNumber;
const int TYRawDataCollectionPbf::kHeadingEventsFieldNumber;
const int TYRawDataCollectionPbf::kSignalEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TYRawDataCollectionPbf::TYRawDataCollectionPbf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:innerpeacer.rawdata.TYRawDataCollectionPbf)
}
TYRawDataCollectionPbf::TYRawDataCollectionPbf(const TYRawDataCollectionPbf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stepevents_(from.stepevents_),
      headingevents_(from.headingevents_),
      signalevents_(from.signalevents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dataid()) {
    dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:innerpeacer.rawdata.TYRawDataCollectionPbf)
}

void TYRawDataCollectionPbf::SharedCtor() {
  _cached_size_ = 0;
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
}

TYRawDataCollectionPbf::~TYRawDataCollectionPbf() {
  // @@protoc_insertion_point(destructor:innerpeacer.rawdata.TYRawDataCollectionPbf)
  SharedDtor();
}

void TYRawDataCollectionPbf::SharedDtor() {
  dataid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TYRawDataCollectionPbf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TYRawDataCollectionPbf::descriptor() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[5].descriptor;
}

const TYRawDataCollectionPbf& TYRawDataCollectionPbf::default_instance() {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::InitDefaults();
  return *internal_default_instance();
}

TYRawDataCollectionPbf* TYRawDataCollectionPbf::New(::google::protobuf::Arena* arena) const {
  TYRawDataCollectionPbf* n = new TYRawDataCollectionPbf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TYRawDataCollectionPbf::Clear() {
// @@protoc_insertion_point(message_clear_start:innerpeacer.rawdata.TYRawDataCollectionPbf)
  stepevents_.Clear();
  headingevents_.Clear();
  signalevents_.Clear();
  if (has_dataid()) {
    GOOGLE_DCHECK(!dataid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*dataid_.UnsafeRawStringPointer())->clear();
  }
  timestamp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TYRawDataCollectionPbf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:innerpeacer.rawdata.TYRawDataCollectionPbf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dataID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataid().data(), this->dataid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "innerpeacer.rawdata.TYRawDataCollectionPbf.dataID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .innerpeacer.rawdata.TYRawStepEventPbf stepEvents = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stepevents()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .innerpeacer.rawdata.TYRawHeadingEventPbf headingEvents = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_headingevents()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .innerpeacer.rawdata.TYRawSignalEventPbf signalEvents = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_signalevents()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:innerpeacer.rawdata.TYRawDataCollectionPbf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:innerpeacer.rawdata.TYRawDataCollectionPbf)
  return false;
#undef DO_
}

void TYRawDataCollectionPbf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:innerpeacer.rawdata.TYRawDataCollectionPbf)
  // required string dataID = 1;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), this->dataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "innerpeacer.rawdata.TYRawDataCollectionPbf.dataID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataid(), output);
  }

  // required double timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // repeated .innerpeacer.rawdata.TYRawStepEventPbf stepEvents = 3;
  for (unsigned int i = 0, n = this->stepevents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stepevents(i), output);
  }

  // repeated .innerpeacer.rawdata.TYRawHeadingEventPbf headingEvents = 4;
  for (unsigned int i = 0, n = this->headingevents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->headingevents(i), output);
  }

  // repeated .innerpeacer.rawdata.TYRawSignalEventPbf signalEvents = 5;
  for (unsigned int i = 0, n = this->signalevents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->signalevents(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:innerpeacer.rawdata.TYRawDataCollectionPbf)
}

::google::protobuf::uint8* TYRawDataCollectionPbf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:innerpeacer.rawdata.TYRawDataCollectionPbf)
  // required string dataID = 1;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), this->dataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "innerpeacer.rawdata.TYRawDataCollectionPbf.dataID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataid(), target);
  }

  // required double timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // repeated .innerpeacer.rawdata.TYRawStepEventPbf stepEvents = 3;
  for (unsigned int i = 0, n = this->stepevents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->stepevents(i), false, target);
  }

  // repeated .innerpeacer.rawdata.TYRawHeadingEventPbf headingEvents = 4;
  for (unsigned int i = 0, n = this->headingevents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->headingevents(i), false, target);
  }

  // repeated .innerpeacer.rawdata.TYRawSignalEventPbf signalEvents = 5;
  for (unsigned int i = 0, n = this->signalevents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->signalevents(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:innerpeacer.rawdata.TYRawDataCollectionPbf)
  return target;
}

size_t TYRawDataCollectionPbf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:innerpeacer.rawdata.TYRawDataCollectionPbf)
  size_t total_size = 0;

  if (has_dataid()) {
    // required string dataID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataid());
  }

  if (has_timestamp()) {
    // required double timestamp = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t TYRawDataCollectionPbf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:innerpeacer.rawdata.TYRawDataCollectionPbf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string dataID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataid());

    // required double timestamp = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .innerpeacer.rawdata.TYRawStepEventPbf stepEvents = 3;
  {
    unsigned int count = this->stepevents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stepevents(i));
    }
  }

  // repeated .innerpeacer.rawdata.TYRawHeadingEventPbf headingEvents = 4;
  {
    unsigned int count = this->headingevents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headingevents(i));
    }
  }

  // repeated .innerpeacer.rawdata.TYRawSignalEventPbf signalEvents = 5;
  {
    unsigned int count = this->signalevents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signalevents(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TYRawDataCollectionPbf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:innerpeacer.rawdata.TYRawDataCollectionPbf)
  GOOGLE_DCHECK_NE(&from, this);
  const TYRawDataCollectionPbf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TYRawDataCollectionPbf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:innerpeacer.rawdata.TYRawDataCollectionPbf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:innerpeacer.rawdata.TYRawDataCollectionPbf)
    MergeFrom(*source);
  }
}

void TYRawDataCollectionPbf::MergeFrom(const TYRawDataCollectionPbf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:innerpeacer.rawdata.TYRawDataCollectionPbf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stepevents_.MergeFrom(from.stepevents_);
  headingevents_.MergeFrom(from.headingevents_);
  signalevents_.MergeFrom(from.signalevents_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_dataid()) {
      set_has_dataid();
      dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void TYRawDataCollectionPbf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:innerpeacer.rawdata.TYRawDataCollectionPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TYRawDataCollectionPbf::CopyFrom(const TYRawDataCollectionPbf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:innerpeacer.rawdata.TYRawDataCollectionPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TYRawDataCollectionPbf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stepevents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->headingevents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signalevents())) return false;
  return true;
}

void TYRawDataCollectionPbf::Swap(TYRawDataCollectionPbf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TYRawDataCollectionPbf::InternalSwap(TYRawDataCollectionPbf* other) {
  stepevents_.UnsafeArenaSwap(&other->stepevents_);
  headingevents_.UnsafeArenaSwap(&other->headingevents_);
  signalevents_.UnsafeArenaSwap(&other->signalevents_);
  dataid_.Swap(&other->dataid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TYRawDataCollectionPbf::GetMetadata() const {
  protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5fraw_5fdata_5fcollection_5fpbf_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TYRawDataCollectionPbf

// required string dataID = 1;
bool TYRawDataCollectionPbf::has_dataid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TYRawDataCollectionPbf::set_has_dataid() {
  _has_bits_[0] |= 0x00000001u;
}
void TYRawDataCollectionPbf::clear_has_dataid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TYRawDataCollectionPbf::clear_dataid() {
  dataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataid();
}
const ::std::string& TYRawDataCollectionPbf::dataid() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawDataCollectionPbf.dataID)
  return dataid_.GetNoArena();
}
void TYRawDataCollectionPbf::set_dataid(const ::std::string& value) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawDataCollectionPbf.dataID)
}
#if LANG_CXX11
void TYRawDataCollectionPbf::set_dataid(::std::string&& value) {
  set_has_dataid();
  dataid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:innerpeacer.rawdata.TYRawDataCollectionPbf.dataID)
}
#endif
void TYRawDataCollectionPbf::set_dataid(const char* value) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:innerpeacer.rawdata.TYRawDataCollectionPbf.dataID)
}
void TYRawDataCollectionPbf::set_dataid(const char* value, size_t size) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:innerpeacer.rawdata.TYRawDataCollectionPbf.dataID)
}
::std::string* TYRawDataCollectionPbf::mutable_dataid() {
  set_has_dataid();
  // @@protoc_insertion_point(field_mutable:innerpeacer.rawdata.TYRawDataCollectionPbf.dataID)
  return dataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TYRawDataCollectionPbf::release_dataid() {
  // @@protoc_insertion_point(field_release:innerpeacer.rawdata.TYRawDataCollectionPbf.dataID)
  clear_has_dataid();
  return dataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TYRawDataCollectionPbf::set_allocated_dataid(::std::string* dataid) {
  if (dataid != NULL) {
    set_has_dataid();
  } else {
    clear_has_dataid();
  }
  dataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataid);
  // @@protoc_insertion_point(field_set_allocated:innerpeacer.rawdata.TYRawDataCollectionPbf.dataID)
}

// required double timestamp = 2;
bool TYRawDataCollectionPbf::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TYRawDataCollectionPbf::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void TYRawDataCollectionPbf::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void TYRawDataCollectionPbf::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double TYRawDataCollectionPbf::timestamp() const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawDataCollectionPbf.timestamp)
  return timestamp_;
}
void TYRawDataCollectionPbf::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.rawdata.TYRawDataCollectionPbf.timestamp)
}

// repeated .innerpeacer.rawdata.TYRawStepEventPbf stepEvents = 3;
int TYRawDataCollectionPbf::stepevents_size() const {
  return stepevents_.size();
}
void TYRawDataCollectionPbf::clear_stepevents() {
  stepevents_.Clear();
}
const ::innerpeacer::rawdata::TYRawStepEventPbf& TYRawDataCollectionPbf::stepevents(int index) const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawDataCollectionPbf.stepEvents)
  return stepevents_.Get(index);
}
::innerpeacer::rawdata::TYRawStepEventPbf* TYRawDataCollectionPbf::mutable_stepevents(int index) {
  // @@protoc_insertion_point(field_mutable:innerpeacer.rawdata.TYRawDataCollectionPbf.stepEvents)
  return stepevents_.Mutable(index);
}
::innerpeacer::rawdata::TYRawStepEventPbf* TYRawDataCollectionPbf::add_stepevents() {
  // @@protoc_insertion_point(field_add:innerpeacer.rawdata.TYRawDataCollectionPbf.stepEvents)
  return stepevents_.Add();
}
::google::protobuf::RepeatedPtrField< ::innerpeacer::rawdata::TYRawStepEventPbf >*
TYRawDataCollectionPbf::mutable_stepevents() {
  // @@protoc_insertion_point(field_mutable_list:innerpeacer.rawdata.TYRawDataCollectionPbf.stepEvents)
  return &stepevents_;
}
const ::google::protobuf::RepeatedPtrField< ::innerpeacer::rawdata::TYRawStepEventPbf >&
TYRawDataCollectionPbf::stepevents() const {
  // @@protoc_insertion_point(field_list:innerpeacer.rawdata.TYRawDataCollectionPbf.stepEvents)
  return stepevents_;
}

// repeated .innerpeacer.rawdata.TYRawHeadingEventPbf headingEvents = 4;
int TYRawDataCollectionPbf::headingevents_size() const {
  return headingevents_.size();
}
void TYRawDataCollectionPbf::clear_headingevents() {
  headingevents_.Clear();
}
const ::innerpeacer::rawdata::TYRawHeadingEventPbf& TYRawDataCollectionPbf::headingevents(int index) const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawDataCollectionPbf.headingEvents)
  return headingevents_.Get(index);
}
::innerpeacer::rawdata::TYRawHeadingEventPbf* TYRawDataCollectionPbf::mutable_headingevents(int index) {
  // @@protoc_insertion_point(field_mutable:innerpeacer.rawdata.TYRawDataCollectionPbf.headingEvents)
  return headingevents_.Mutable(index);
}
::innerpeacer::rawdata::TYRawHeadingEventPbf* TYRawDataCollectionPbf::add_headingevents() {
  // @@protoc_insertion_point(field_add:innerpeacer.rawdata.TYRawDataCollectionPbf.headingEvents)
  return headingevents_.Add();
}
::google::protobuf::RepeatedPtrField< ::innerpeacer::rawdata::TYRawHeadingEventPbf >*
TYRawDataCollectionPbf::mutable_headingevents() {
  // @@protoc_insertion_point(field_mutable_list:innerpeacer.rawdata.TYRawDataCollectionPbf.headingEvents)
  return &headingevents_;
}
const ::google::protobuf::RepeatedPtrField< ::innerpeacer::rawdata::TYRawHeadingEventPbf >&
TYRawDataCollectionPbf::headingevents() const {
  // @@protoc_insertion_point(field_list:innerpeacer.rawdata.TYRawDataCollectionPbf.headingEvents)
  return headingevents_;
}

// repeated .innerpeacer.rawdata.TYRawSignalEventPbf signalEvents = 5;
int TYRawDataCollectionPbf::signalevents_size() const {
  return signalevents_.size();
}
void TYRawDataCollectionPbf::clear_signalevents() {
  signalevents_.Clear();
}
const ::innerpeacer::rawdata::TYRawSignalEventPbf& TYRawDataCollectionPbf::signalevents(int index) const {
  // @@protoc_insertion_point(field_get:innerpeacer.rawdata.TYRawDataCollectionPbf.signalEvents)
  return signalevents_.Get(index);
}
::innerpeacer::rawdata::TYRawSignalEventPbf* TYRawDataCollectionPbf::mutable_signalevents(int index) {
  // @@protoc_insertion_point(field_mutable:innerpeacer.rawdata.TYRawDataCollectionPbf.signalEvents)
  return signalevents_.Mutable(index);
}
::innerpeacer::rawdata::TYRawSignalEventPbf* TYRawDataCollectionPbf::add_signalevents() {
  // @@protoc_insertion_point(field_add:innerpeacer.rawdata.TYRawDataCollectionPbf.signalEvents)
  return signalevents_.Add();
}
::google::protobuf::RepeatedPtrField< ::innerpeacer::rawdata::TYRawSignalEventPbf >*
TYRawDataCollectionPbf::mutable_signalevents() {
  // @@protoc_insertion_point(field_mutable_list:innerpeacer.rawdata.TYRawDataCollectionPbf.signalEvents)
  return &signalevents_;
}
const ::google::protobuf::RepeatedPtrField< ::innerpeacer::rawdata::TYRawSignalEventPbf >&
TYRawDataCollectionPbf::signalevents() const {
  // @@protoc_insertion_point(field_list:innerpeacer.rawdata.TYRawDataCollectionPbf.signalEvents)
  return signalevents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rawdata
}  // namespace innerpeacer

// @@protoc_insertion_point(global_scope)
