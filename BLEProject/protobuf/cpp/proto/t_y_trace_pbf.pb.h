// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t_y_trace_pbf.proto

#ifndef PROTOBUF_t_5fy_5ftrace_5fpbf_2eproto__INCLUDED
#define PROTOBUF_t_5fy_5ftrace_5fpbf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace innerpeacer {
namespace trace {
class TYTracePbf;
class TYTracePbfDefaultTypeInternal;
extern TYTracePbfDefaultTypeInternal _TYTracePbf_default_instance_;
class TYTracePointPbf;
class TYTracePointPbfDefaultTypeInternal;
extern TYTracePointPbfDefaultTypeInternal _TYTracePointPbf_default_instance_;
}  // namespace trace
}  // namespace innerpeacer

namespace innerpeacer {
namespace trace {

namespace protobuf_t_5fy_5ftrace_5fpbf_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_t_5fy_5ftrace_5fpbf_2eproto

// ===================================================================

class TYTracePointPbf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:innerpeacer.trace.TYTracePointPbf) */ {
 public:
  TYTracePointPbf();
  virtual ~TYTracePointPbf();

  TYTracePointPbf(const TYTracePointPbf& from);

  inline TYTracePointPbf& operator=(const TYTracePointPbf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TYTracePointPbf& default_instance();

  static inline const TYTracePointPbf* internal_default_instance() {
    return reinterpret_cast<const TYTracePointPbf*>(
               &_TYTracePointPbf_default_instance_);
  }

  void Swap(TYTracePointPbf* other);

  // implements Message ----------------------------------------------

  inline TYTracePointPbf* New() const PROTOBUF_FINAL { return New(NULL); }

  TYTracePointPbf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TYTracePointPbf& from);
  void MergeFrom(const TYTracePointPbf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TYTracePointPbf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // required uint32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // required uint32 floor = 4;
  bool has_floor() const;
  void clear_floor();
  static const int kFloorFieldNumber = 4;
  ::google::protobuf::uint32 floor() const;
  void set_floor(::google::protobuf::uint32 value);

  // required double y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // required double timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:innerpeacer.trace.TYTracePointPbf)
 private:
  void set_has_index();
  void clear_has_index();
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_floor();
  void clear_has_floor();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 floor_;
  double y_;
  double timestamp_;
  friend struct protobuf_t_5fy_5ftrace_5fpbf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TYTracePbf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:innerpeacer.trace.TYTracePbf) */ {
 public:
  TYTracePbf();
  virtual ~TYTracePbf();

  TYTracePbf(const TYTracePbf& from);

  inline TYTracePbf& operator=(const TYTracePbf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TYTracePbf& default_instance();

  static inline const TYTracePbf* internal_default_instance() {
    return reinterpret_cast<const TYTracePbf*>(
               &_TYTracePbf_default_instance_);
  }

  void Swap(TYTracePbf* other);

  // implements Message ----------------------------------------------

  inline TYTracePbf* New() const PROTOBUF_FINAL { return New(NULL); }

  TYTracePbf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TYTracePbf& from);
  void MergeFrom(const TYTracePbf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TYTracePbf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .innerpeacer.trace.TYTracePointPbf points = 3;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 3;
  const ::innerpeacer::trace::TYTracePointPbf& points(int index) const;
  ::innerpeacer::trace::TYTracePointPbf* mutable_points(int index);
  ::innerpeacer::trace::TYTracePointPbf* add_points();
  ::google::protobuf::RepeatedPtrField< ::innerpeacer::trace::TYTracePointPbf >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::innerpeacer::trace::TYTracePointPbf >&
      points() const;

  // required string traceID = 1;
  bool has_traceid() const;
  void clear_traceid();
  static const int kTraceIDFieldNumber = 1;
  const ::std::string& traceid() const;
  void set_traceid(const ::std::string& value);
  #if LANG_CXX11
  void set_traceid(::std::string&& value);
  #endif
  void set_traceid(const char* value);
  void set_traceid(const char* value, size_t size);
  ::std::string* mutable_traceid();
  ::std::string* release_traceid();
  void set_allocated_traceid(::std::string* traceid);

  // required double timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:innerpeacer.trace.TYTracePbf)
 private:
  void set_has_traceid();
  void clear_has_traceid();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::innerpeacer::trace::TYTracePointPbf > points_;
  ::google::protobuf::internal::ArenaStringPtr traceid_;
  double timestamp_;
  friend struct protobuf_t_5fy_5ftrace_5fpbf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TYTracePointPbf

// required uint32 index = 1;
inline bool TYTracePointPbf::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TYTracePointPbf::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TYTracePointPbf::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TYTracePointPbf::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 TYTracePointPbf::index() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePointPbf.index)
  return index_;
}
inline void TYTracePointPbf::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePointPbf.index)
}

// required double x = 2;
inline bool TYTracePointPbf::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TYTracePointPbf::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TYTracePointPbf::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TYTracePointPbf::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double TYTracePointPbf::x() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePointPbf.x)
  return x_;
}
inline void TYTracePointPbf::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePointPbf.x)
}

// required double y = 3;
inline bool TYTracePointPbf::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TYTracePointPbf::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TYTracePointPbf::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TYTracePointPbf::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double TYTracePointPbf::y() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePointPbf.y)
  return y_;
}
inline void TYTracePointPbf::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePointPbf.y)
}

// required uint32 floor = 4;
inline bool TYTracePointPbf::has_floor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TYTracePointPbf::set_has_floor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TYTracePointPbf::clear_has_floor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TYTracePointPbf::clear_floor() {
  floor_ = 0u;
  clear_has_floor();
}
inline ::google::protobuf::uint32 TYTracePointPbf::floor() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePointPbf.floor)
  return floor_;
}
inline void TYTracePointPbf::set_floor(::google::protobuf::uint32 value) {
  set_has_floor();
  floor_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePointPbf.floor)
}

// required double timestamp = 5;
inline bool TYTracePointPbf::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TYTracePointPbf::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TYTracePointPbf::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TYTracePointPbf::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double TYTracePointPbf::timestamp() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePointPbf.timestamp)
  return timestamp_;
}
inline void TYTracePointPbf::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePointPbf.timestamp)
}

// -------------------------------------------------------------------

// TYTracePbf

// required string traceID = 1;
inline bool TYTracePbf::has_traceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TYTracePbf::set_has_traceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TYTracePbf::clear_has_traceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TYTracePbf::clear_traceid() {
  traceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_traceid();
}
inline const ::std::string& TYTracePbf::traceid() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePbf.traceID)
  return traceid_.GetNoArena();
}
inline void TYTracePbf::set_traceid(const ::std::string& value) {
  set_has_traceid();
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePbf.traceID)
}
#if LANG_CXX11
inline void TYTracePbf::set_traceid(::std::string&& value) {
  set_has_traceid();
  traceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:innerpeacer.trace.TYTracePbf.traceID)
}
#endif
inline void TYTracePbf::set_traceid(const char* value) {
  set_has_traceid();
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:innerpeacer.trace.TYTracePbf.traceID)
}
inline void TYTracePbf::set_traceid(const char* value, size_t size) {
  set_has_traceid();
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:innerpeacer.trace.TYTracePbf.traceID)
}
inline ::std::string* TYTracePbf::mutable_traceid() {
  set_has_traceid();
  // @@protoc_insertion_point(field_mutable:innerpeacer.trace.TYTracePbf.traceID)
  return traceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TYTracePbf::release_traceid() {
  // @@protoc_insertion_point(field_release:innerpeacer.trace.TYTracePbf.traceID)
  clear_has_traceid();
  return traceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TYTracePbf::set_allocated_traceid(::std::string* traceid) {
  if (traceid != NULL) {
    set_has_traceid();
  } else {
    clear_has_traceid();
  }
  traceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traceid);
  // @@protoc_insertion_point(field_set_allocated:innerpeacer.trace.TYTracePbf.traceID)
}

// required double timestamp = 2;
inline bool TYTracePbf::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TYTracePbf::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TYTracePbf::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TYTracePbf::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double TYTracePbf::timestamp() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePbf.timestamp)
  return timestamp_;
}
inline void TYTracePbf::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePbf.timestamp)
}

// repeated .innerpeacer.trace.TYTracePointPbf points = 3;
inline int TYTracePbf::points_size() const {
  return points_.size();
}
inline void TYTracePbf::clear_points() {
  points_.Clear();
}
inline const ::innerpeacer::trace::TYTracePointPbf& TYTracePbf::points(int index) const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePbf.points)
  return points_.Get(index);
}
inline ::innerpeacer::trace::TYTracePointPbf* TYTracePbf::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:innerpeacer.trace.TYTracePbf.points)
  return points_.Mutable(index);
}
inline ::innerpeacer::trace::TYTracePointPbf* TYTracePbf::add_points() {
  // @@protoc_insertion_point(field_add:innerpeacer.trace.TYTracePbf.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::innerpeacer::trace::TYTracePointPbf >*
TYTracePbf::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:innerpeacer.trace.TYTracePbf.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::innerpeacer::trace::TYTracePointPbf >&
TYTracePbf::points() const {
  // @@protoc_insertion_point(field_list:innerpeacer.trace.TYTracePbf.points)
  return points_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace trace
}  // namespace innerpeacer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_t_5fy_5ftrace_5fpbf_2eproto__INCLUDED
