// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t_y_trace_pbf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "t_y_trace_pbf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace innerpeacer {
namespace trace {
class TYTracePointPbfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TYTracePointPbf> {
} _TYTracePointPbf_default_instance_;
class TYTracePbfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TYTracePbf> {
} _TYTracePbf_default_instance_;

namespace protobuf_t_5fy_5ftrace_5fpbf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePointPbf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePointPbf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePointPbf, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePointPbf, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePointPbf, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePointPbf, floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePointPbf, timestamp_),
  1,
  0,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePbf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePbf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePbf, traceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePbf, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TYTracePbf, points_),
  0,
  1,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(TYTracePointPbf)},
  { 14, 21, sizeof(TYTracePbf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TYTracePointPbf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TYTracePbf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "t_y_trace_pbf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _TYTracePointPbf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TYTracePbf_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TYTracePointPbf_default_instance_.DefaultConstruct();
  _TYTracePbf_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023t_y_trace_pbf.proto\022\021innerpeacer.trace"
      "\"X\n\017TYTracePointPbf\022\r\n\005index\030\001 \002(\r\022\t\n\001x\030"
      "\002 \002(\001\022\t\n\001y\030\003 \002(\001\022\r\n\005floor\030\004 \002(\r\022\021\n\ttimes"
      "tamp\030\005 \002(\001\"d\n\nTYTracePbf\022\017\n\007traceID\030\001 \002("
      "\t\022\021\n\ttimestamp\030\002 \002(\001\0222\n\006points\030\003 \003(\0132\".i"
      "nnerpeacer.trace.TYTracePointPbf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "t_y_trace_pbf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_t_5fy_5ftrace_5fpbf_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TYTracePointPbf::kIndexFieldNumber;
const int TYTracePointPbf::kXFieldNumber;
const int TYTracePointPbf::kYFieldNumber;
const int TYTracePointPbf::kFloorFieldNumber;
const int TYTracePointPbf::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TYTracePointPbf::TYTracePointPbf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t_5fy_5ftrace_5fpbf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:innerpeacer.trace.TYTracePointPbf)
}
TYTracePointPbf::TYTracePointPbf(const TYTracePointPbf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&x_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:innerpeacer.trace.TYTracePointPbf)
}

void TYTracePointPbf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&x_) + sizeof(timestamp_));
}

TYTracePointPbf::~TYTracePointPbf() {
  // @@protoc_insertion_point(destructor:innerpeacer.trace.TYTracePointPbf)
  SharedDtor();
}

void TYTracePointPbf::SharedDtor() {
}

void TYTracePointPbf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TYTracePointPbf::descriptor() {
  protobuf_t_5fy_5ftrace_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5ftrace_5fpbf_2eproto::file_level_metadata[0].descriptor;
}

const TYTracePointPbf& TYTracePointPbf::default_instance() {
  protobuf_t_5fy_5ftrace_5fpbf_2eproto::InitDefaults();
  return *internal_default_instance();
}

TYTracePointPbf* TYTracePointPbf::New(::google::protobuf::Arena* arena) const {
  TYTracePointPbf* n = new TYTracePointPbf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TYTracePointPbf::Clear() {
// @@protoc_insertion_point(message_clear_start:innerpeacer.trace.TYTracePointPbf)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&x_) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TYTracePointPbf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:innerpeacer.trace.TYTracePointPbf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 floor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_floor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:innerpeacer.trace.TYTracePointPbf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:innerpeacer.trace.TYTracePointPbf)
  return false;
#undef DO_
}

void TYTracePointPbf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:innerpeacer.trace.TYTracePointPbf)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required double x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // required double y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // required uint32 floor = 4;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->floor(), output);
  }

  // required double timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:innerpeacer.trace.TYTracePointPbf)
}

::google::protobuf::uint8* TYTracePointPbf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:innerpeacer.trace.TYTracePointPbf)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required double x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // required double y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // required uint32 floor = 4;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->floor(), target);
  }

  // required double timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:innerpeacer.trace.TYTracePointPbf)
  return target;
}

size_t TYTracePointPbf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:innerpeacer.trace.TYTracePointPbf)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 2;
    total_size += 1 + 8;
  }

  if (has_index()) {
    // required uint32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  if (has_floor()) {
    // required uint32 floor = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->floor());
  }

  if (has_y()) {
    // required double y = 3;
    total_size += 1 + 8;
  }

  if (has_timestamp()) {
    // required double timestamp = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t TYTracePointPbf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:innerpeacer.trace.TYTracePointPbf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required double x = 2;
    total_size += 1 + 8;

    // required uint32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

    // required uint32 floor = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->floor());

    // required double y = 3;
    total_size += 1 + 8;

    // required double timestamp = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TYTracePointPbf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:innerpeacer.trace.TYTracePointPbf)
  GOOGLE_DCHECK_NE(&from, this);
  const TYTracePointPbf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TYTracePointPbf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:innerpeacer.trace.TYTracePointPbf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:innerpeacer.trace.TYTracePointPbf)
    MergeFrom(*source);
  }
}

void TYTracePointPbf::MergeFrom(const TYTracePointPbf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:innerpeacer.trace.TYTracePointPbf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void TYTracePointPbf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:innerpeacer.trace.TYTracePointPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TYTracePointPbf::CopyFrom(const TYTracePointPbf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:innerpeacer.trace.TYTracePointPbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TYTracePointPbf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void TYTracePointPbf::Swap(TYTracePointPbf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TYTracePointPbf::InternalSwap(TYTracePointPbf* other) {
  std::swap(x_, other->x_);
  std::swap(index_, other->index_);
  std::swap(floor_, other->floor_);
  std::swap(y_, other->y_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TYTracePointPbf::GetMetadata() const {
  protobuf_t_5fy_5ftrace_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5ftrace_5fpbf_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TYTracePointPbf

// required uint32 index = 1;
bool TYTracePointPbf::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TYTracePointPbf::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void TYTracePointPbf::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void TYTracePointPbf::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 TYTracePointPbf::index() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePointPbf.index)
  return index_;
}
void TYTracePointPbf::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePointPbf.index)
}

// required double x = 2;
bool TYTracePointPbf::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TYTracePointPbf::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void TYTracePointPbf::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void TYTracePointPbf::clear_x() {
  x_ = 0;
  clear_has_x();
}
double TYTracePointPbf::x() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePointPbf.x)
  return x_;
}
void TYTracePointPbf::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePointPbf.x)
}

// required double y = 3;
bool TYTracePointPbf::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TYTracePointPbf::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void TYTracePointPbf::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void TYTracePointPbf::clear_y() {
  y_ = 0;
  clear_has_y();
}
double TYTracePointPbf::y() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePointPbf.y)
  return y_;
}
void TYTracePointPbf::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePointPbf.y)
}

// required uint32 floor = 4;
bool TYTracePointPbf::has_floor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TYTracePointPbf::set_has_floor() {
  _has_bits_[0] |= 0x00000004u;
}
void TYTracePointPbf::clear_has_floor() {
  _has_bits_[0] &= ~0x00000004u;
}
void TYTracePointPbf::clear_floor() {
  floor_ = 0u;
  clear_has_floor();
}
::google::protobuf::uint32 TYTracePointPbf::floor() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePointPbf.floor)
  return floor_;
}
void TYTracePointPbf::set_floor(::google::protobuf::uint32 value) {
  set_has_floor();
  floor_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePointPbf.floor)
}

// required double timestamp = 5;
bool TYTracePointPbf::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TYTracePointPbf::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void TYTracePointPbf::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void TYTracePointPbf::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double TYTracePointPbf::timestamp() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePointPbf.timestamp)
  return timestamp_;
}
void TYTracePointPbf::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePointPbf.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TYTracePbf::kTraceIDFieldNumber;
const int TYTracePbf::kTimestampFieldNumber;
const int TYTracePbf::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TYTracePbf::TYTracePbf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t_5fy_5ftrace_5fpbf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:innerpeacer.trace.TYTracePbf)
}
TYTracePbf::TYTracePbf(const TYTracePbf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  traceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_traceid()) {
    traceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traceid_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:innerpeacer.trace.TYTracePbf)
}

void TYTracePbf::SharedCtor() {
  _cached_size_ = 0;
  traceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
}

TYTracePbf::~TYTracePbf() {
  // @@protoc_insertion_point(destructor:innerpeacer.trace.TYTracePbf)
  SharedDtor();
}

void TYTracePbf::SharedDtor() {
  traceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TYTracePbf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TYTracePbf::descriptor() {
  protobuf_t_5fy_5ftrace_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5ftrace_5fpbf_2eproto::file_level_metadata[1].descriptor;
}

const TYTracePbf& TYTracePbf::default_instance() {
  protobuf_t_5fy_5ftrace_5fpbf_2eproto::InitDefaults();
  return *internal_default_instance();
}

TYTracePbf* TYTracePbf::New(::google::protobuf::Arena* arena) const {
  TYTracePbf* n = new TYTracePbf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TYTracePbf::Clear() {
// @@protoc_insertion_point(message_clear_start:innerpeacer.trace.TYTracePbf)
  points_.Clear();
  if (has_traceid()) {
    GOOGLE_DCHECK(!traceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*traceid_.UnsafeRawStringPointer())->clear();
  }
  timestamp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TYTracePbf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:innerpeacer.trace.TYTracePbf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string traceID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->traceid().data(), this->traceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "innerpeacer.trace.TYTracePbf.traceID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .innerpeacer.trace.TYTracePointPbf points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:innerpeacer.trace.TYTracePbf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:innerpeacer.trace.TYTracePbf)
  return false;
#undef DO_
}

void TYTracePbf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:innerpeacer.trace.TYTracePbf)
  // required string traceID = 1;
  if (has_traceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traceid().data(), this->traceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "innerpeacer.trace.TYTracePbf.traceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->traceid(), output);
  }

  // required double timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // repeated .innerpeacer.trace.TYTracePointPbf points = 3;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->points(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:innerpeacer.trace.TYTracePbf)
}

::google::protobuf::uint8* TYTracePbf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:innerpeacer.trace.TYTracePbf)
  // required string traceID = 1;
  if (has_traceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traceid().data(), this->traceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "innerpeacer.trace.TYTracePbf.traceID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->traceid(), target);
  }

  // required double timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // repeated .innerpeacer.trace.TYTracePointPbf points = 3;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->points(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:innerpeacer.trace.TYTracePbf)
  return target;
}

size_t TYTracePbf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:innerpeacer.trace.TYTracePbf)
  size_t total_size = 0;

  if (has_traceid()) {
    // required string traceID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traceid());
  }

  if (has_timestamp()) {
    // required double timestamp = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t TYTracePbf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:innerpeacer.trace.TYTracePbf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string traceID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traceid());

    // required double timestamp = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .innerpeacer.trace.TYTracePointPbf points = 3;
  {
    unsigned int count = this->points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TYTracePbf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:innerpeacer.trace.TYTracePbf)
  GOOGLE_DCHECK_NE(&from, this);
  const TYTracePbf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TYTracePbf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:innerpeacer.trace.TYTracePbf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:innerpeacer.trace.TYTracePbf)
    MergeFrom(*source);
  }
}

void TYTracePbf::MergeFrom(const TYTracePbf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:innerpeacer.trace.TYTracePbf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_traceid()) {
      set_has_traceid();
      traceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traceid_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void TYTracePbf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:innerpeacer.trace.TYTracePbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TYTracePbf::CopyFrom(const TYTracePbf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:innerpeacer.trace.TYTracePbf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TYTracePbf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->points())) return false;
  return true;
}

void TYTracePbf::Swap(TYTracePbf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TYTracePbf::InternalSwap(TYTracePbf* other) {
  points_.UnsafeArenaSwap(&other->points_);
  traceid_.Swap(&other->traceid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TYTracePbf::GetMetadata() const {
  protobuf_t_5fy_5ftrace_5fpbf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t_5fy_5ftrace_5fpbf_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TYTracePbf

// required string traceID = 1;
bool TYTracePbf::has_traceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TYTracePbf::set_has_traceid() {
  _has_bits_[0] |= 0x00000001u;
}
void TYTracePbf::clear_has_traceid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TYTracePbf::clear_traceid() {
  traceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_traceid();
}
const ::std::string& TYTracePbf::traceid() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePbf.traceID)
  return traceid_.GetNoArena();
}
void TYTracePbf::set_traceid(const ::std::string& value) {
  set_has_traceid();
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePbf.traceID)
}
#if LANG_CXX11
void TYTracePbf::set_traceid(::std::string&& value) {
  set_has_traceid();
  traceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:innerpeacer.trace.TYTracePbf.traceID)
}
#endif
void TYTracePbf::set_traceid(const char* value) {
  set_has_traceid();
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:innerpeacer.trace.TYTracePbf.traceID)
}
void TYTracePbf::set_traceid(const char* value, size_t size) {
  set_has_traceid();
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:innerpeacer.trace.TYTracePbf.traceID)
}
::std::string* TYTracePbf::mutable_traceid() {
  set_has_traceid();
  // @@protoc_insertion_point(field_mutable:innerpeacer.trace.TYTracePbf.traceID)
  return traceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TYTracePbf::release_traceid() {
  // @@protoc_insertion_point(field_release:innerpeacer.trace.TYTracePbf.traceID)
  clear_has_traceid();
  return traceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TYTracePbf::set_allocated_traceid(::std::string* traceid) {
  if (traceid != NULL) {
    set_has_traceid();
  } else {
    clear_has_traceid();
  }
  traceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traceid);
  // @@protoc_insertion_point(field_set_allocated:innerpeacer.trace.TYTracePbf.traceID)
}

// required double timestamp = 2;
bool TYTracePbf::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TYTracePbf::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void TYTracePbf::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void TYTracePbf::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double TYTracePbf::timestamp() const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePbf.timestamp)
  return timestamp_;
}
void TYTracePbf::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:innerpeacer.trace.TYTracePbf.timestamp)
}

// repeated .innerpeacer.trace.TYTracePointPbf points = 3;
int TYTracePbf::points_size() const {
  return points_.size();
}
void TYTracePbf::clear_points() {
  points_.Clear();
}
const ::innerpeacer::trace::TYTracePointPbf& TYTracePbf::points(int index) const {
  // @@protoc_insertion_point(field_get:innerpeacer.trace.TYTracePbf.points)
  return points_.Get(index);
}
::innerpeacer::trace::TYTracePointPbf* TYTracePbf::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:innerpeacer.trace.TYTracePbf.points)
  return points_.Mutable(index);
}
::innerpeacer::trace::TYTracePointPbf* TYTracePbf::add_points() {
  // @@protoc_insertion_point(field_add:innerpeacer.trace.TYTracePbf.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::innerpeacer::trace::TYTracePointPbf >*
TYTracePbf::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:innerpeacer.trace.TYTracePbf.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::innerpeacer::trace::TYTracePointPbf >&
TYTracePbf::points() const {
  // @@protoc_insertion_point(field_list:innerpeacer.trace.TYTracePbf.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace trace
}  // namespace innerpeacer

// @@protoc_insertion_point(global_scope)
